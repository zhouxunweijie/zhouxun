1 本地存储
  第一次打开页面，我们向客户端的本地磁盘存储一些信息，以后页面关闭或者刷新，我们储存的信息不消失，依然可以从本地把储存的信息获取到

  ->应用场景：
    1 记住用户名和密码：第一次登陆时，我们把用户名和密码存储到本地，下次再打开登陆这个页面，用户名和密码自动会显示在输入框中
    2 自动登录：第一次登录时，我们把用户名和密码储存在本地，
    3 购物车：我们在A页面 点击添加至购物车，我们把信息存储到购物车，到另一个页面，如果需要展示购买的信息，我们在从本地把储存的信息获取到即可
        =>我们在A页面操作一些信息，需要在其它页面也获取到这些信息，或者是页面关闭后这些信息都不要消失，此类需求我们就会用到本地储存


2  实现本地存储的方案
   -》cookie:
   1、兼容所有的浏览器
   2、在同一个源下最多只能储存4kb大小的内容
   3 cookie存储是由过期时间的时间（我们可以自己设置），到了时间。cookie自动清除
   4 360等垃圾清理或者是浏览器的垃圾清理操作，都会把cookie清除
   5 用户可能会出于安全的考虑，开启无痕迷失或者是隐身模式，这样我们的cookie是无法储存的
   6 cookie不是严格的本地储存，他本身和服务器之间存在很大的猫腻，我们需要使用cookie的时候，他总是在客户端和服务器之间来回传输

   ->webStorage:localStorage、sessionStorage
   不兼容IE低版本浏览器，应为他是HTML5中新增加的API方法
   再同一个源下最多可以储存5MB的内容  =》 我们基于这个特点给服务器减压：第一次加载页面的时候，我们使用AJAX/JSONP等技术从服务器端获取到了很多要展示的数据，我们把这些数据动态的绑定在页面上，但是绑定完成后，我们本次获取的数据（或者是我们已经拼接好的字符串）以及当前的时间存储的客户端本地（locakStorage）;当用户再一次打开页面的时候哦，我们看一下当前的时间，如果当前的时间和上一次存储的时间间隔不到一分钟（差值自己定）；我们不需要向服务器发送请求获取数据了（服务器减压），我们只需要把上一次本地储存的内容拿出来展示在页面中即可，如果超过了时间，我们从新的服务器重新拿数据来绑定，在把新的数据储存的本地一份，记录新的存储时间
   3 webStorage是没有过期时间的，属于永久的储存（除非我们手动清理）
   4 360等浏览器的垃圾清理，是不会对webStorage产生影响的
   5 webStorage的存储不受无痕浏览和隐身模式的影响
   6 webStorage就是本地储存，和服务器半毛钱关系都没有

   共同部分;
     1 本地存储的位置：对应于浏览器并且对应源（域）下存储一些信息
        在谷歌浏览器的京东网站页面中存储了一些信息，在IE下获取不到

     2 如何查看本地的存储信息
        不管是那一种方式，都可以在控制台看到，而且采用的是明文存储，如果非要储存，那么就要加密



   localStorage  PK  sessionStorage
   -》localStorage：本地永久储存
   -》sessionStorage:本地临时会话储存（页面刷新，数据还在：但是页面一旦关闭，存储的数据就清空了）


3、具体的用法
    cookie
    document.cookie = '';